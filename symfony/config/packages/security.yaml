security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        # API Firewall, use JWT for mobiles app
        api:
            pattern: ^/api
            stateless: true
            provider: app_user_provider
            jwt: ~
            json_login:
                check_path: auth
                username_path: email
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        # Main firewall for symfony apllication
        main:
            lazy: true
            provider: app_user_provider
            stateless: false
            form_login:
                check_path: app_login
                login_path: app_login
                # default_target_path: home
                use_referer: true
                enable_csrf: true
            custom_authenticator: App\Security\LoginAuthenticator
            logout:
                path: app_logout
                # target: home
            remember_me:
                secret:   '%kernel.secret%' # required
                lifetime: 604800 # 1 week in seconds
            entry_point: App\Security\LoginAuthenticator
            
            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/admin, roles: ROLE_ADMIN }
        - { path: ^/profile, roles: ROLE_USER }
        - { path: ^/artist, roles: ROLE_ARTIST }
        # - { path: ^/api/, roles: ROLE_ADMIN }
        # - { path: ^/api, roles: PUBLIC_ACCESS }

    role_hierarchy:
        ROLE_ARTIST: ROLE_USER
        ROLE_ADMIN: ROLE_ARTIST
        
when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
